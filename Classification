{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Untitled4.ipynb",
      "provenance": [],
      "authorship_tag": "ABX9TyNlQl67u24hRvEYQghzxuE8",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/BadariNarayana/Machine-Learning-Project1/blob/main/Classification\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Fl5ezrx1Tt4-"
      },
      "source": [
        "## ***Classificaton ***"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "UTlTElrJUGS-"
      },
      "source": [
        "K-Neighbour Algorithm"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "nJgN8uCOPPQB",
        "outputId": "eabb4834-bfd1-4d3e-f617-d236c9db099c"
      },
      "source": [
        "#Classification \n",
        "#K-Neighbour Algorithm\n",
        "x=[[0],[1],[2],[3]]\n",
        "y=[0,0,1,1]\n",
        "from sklearn.neighbors import KNeighborsClassifier\n",
        "neigh=KNeighborsClassifier(n_neighbors=3).fit(x,y)\n",
        "print(neigh.predict([[0.9],[1.1],[2.1],[1.5],[3.5]]))\n"
      ],
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[0 0 1 0 1]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "cTHb_bjWT8X0"
      },
      "source": [
        "To Measure the Accurate Classification"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "wy1TsO7UTKli",
        "outputId": "b5f91ab8-06c4-4537-f25e-fb942183bf6d"
      },
      "source": [
        "from sklearn.metrics import accuracy_score\n",
        "y_pred=[0,2,1,3]\n",
        "y_true=[0,1,2,3]\n",
        "accuracy_score(y_pred,y_true)"
      ],
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.5"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 10
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "RqJVimpUUDtd",
        "outputId": "ed4d85ab-5247-46fd-d34b-2fca818651cc"
      },
      "source": [
        "from sklearn import tree\n",
        "x=[[0,0],[1,1]]\n",
        "y=[0,1]\n",
        "clf=tree.DecisionTreeClassifier().fit(x,y)\n",
        "clf.predict([[2.,2.]])\n"
      ],
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([1])"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 11
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "QqheDTker23d"
      },
      "source": [
        "Support Vector Machine"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "b71n3Z9Br8AD",
        "outputId": "e499d8da-dcf7-44a9-b96d-fc59edf11ad6"
      },
      "source": [
        "import numpy as np\n",
        "x=np.array([[-1,-1],[-2,-1],[1,1],[2,1]])\n",
        "y=np.array([1,1,2,2])\n",
        "from sklearn.svm import SVC\n",
        "from sklearn.metrics import accuracy_score\n",
        "clf=SVC().fit(x,y)\n",
        "clf.predict([[-0.8,-1]])\n"
      ],
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([1])"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 6
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "4edhbEiuycv8"
      },
      "source": [
        "SKLEARN random forest regression "
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2GlzQPwUyiBV",
        "outputId": "f9071d92-adf6-4247-a74c-75b6fc164680"
      },
      "source": [
        "from sklearn.ensemble import RandomForestRegressor\n",
        "from sklearn.datasets import make_regression\n",
        "x,y=make_regression(n_features=4,n_informative=2,random_state=0,shuffle=False)\n",
        "regr=RandomForestRegressor(max_depth=2,random_state=0).fit(x,y)\n",
        "print(regr.predict([[0,0,0,0]]))"
      ],
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[-8.32987858]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "9SYpPhH2zeUi"
      },
      "source": [
        "SKLEARN random forest classifier\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "foxVxvmhzlcR",
        "outputId": "27109aed-9aa0-408a-9e7d-745b94979f5e"
      },
      "source": [
        "from sklearn.ensemble import RandomForestClassifier\n",
        "from sklearn.datasets import make_classification\n",
        "x,y=make_classification(n_samples=1000,n_features=4,n_informative=2,n_redundant=0,random_state=0,shuffle=False)\n",
        "regr=RandomForestClassifier(max_depth=2,random_state=0).fit(x,y)\n",
        "print(regr.predict([[0,0,0,0]]))"
      ],
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[1]\n"
          ],
          "name": "stdout"
        }
      ]
    }
  ]
}